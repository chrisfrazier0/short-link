name: General checks
on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  APP_USER: app
  APP_USER_PW: secret

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Run linter
        run: cargo clippy -- -D warnings

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      - name: Create app user in Postgres
        run: |
          sudo apt-get install postgresql-client
          export PGPASSWORD="${POSTGRES_PASSWORD}"

          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PW}';"
          psql -U "${POSTGRES_USER}" -h localhost -c "${CREATE_QUERY}"

          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          psql -U "${POSTGRES_USER}" -h localhost -c "${GRANT_QUERY}"

      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/database.sh

      - name: Run tests
        run: cargo test

      - name: Check that queries are fresh
        run: cargo sqlx prepare --workspace --check -- --all-targets

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      - name: Create app user in Postgres
        run: |
          sudo apt-get install postgresql-client
          export PGPASSWORD="${POSTGRES_PASSWORD}"

          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PW}';"
          psql -U "${POSTGRES_USER}" -h localhost -c "${CREATE_QUERY}"

          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          psql -U "${POSTGRES_USER}" -h localhost -c "${GRANT_QUERY}"

      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/database.sh

      - name: Install cargo-llvm-cov
        run: cargo +stable install cargo-llvm-cov --locked

      - name: Generate report
        run: cargo llvm-cov --all-features --workspace --json --output-path coverage.json

      - name: Generate summary
        run: |
          echo "| File | Lines % | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          total=0
          count=0
          while IFS=$'\t' read -r file lines; do
            relative_file=$(realpath --relative-to="$PWD" "$file")
            if (( $(echo "$lines < 50" | bc -l) )); then
              health_status=":x:"
            elif (( $(echo "$lines < 80" | bc -l) )); then
              health_status=":neutral_face:"
            else
              health_status=":white_check_mark:"
            fi
            echo "| $relative_file | $lines% | $health_status |" >> $GITHUB_STEP_SUMMARY
            total=$(echo "$total + $lines" | bc)
            count=$((count+1))
          done < <(jq -r '.data[].files[] | [.filename, .summary.lines.percent] | @tsv' coverage.json)
          average=$(echo "scale=2; $total / $count" | bc)
          if (( $(echo "$average < 50" | bc -l) )); then
            health_status=":x:"
          elif (( $(echo "$average < 80" | bc -l) )); then
            health_status=":neutral_face:"
          else
            health_status=":white_check_mark:"
          fi
          echo "| **Total** | **${average}%** | $health_status |" >> $GITHUB_STEP_SUMMARY
